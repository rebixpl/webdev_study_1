.blue {
  width: 100px;
  height: 100px;
  background-color: blue;
  position: static;
  /* left: 100px; */
  /* static: every element has a static position by default, so the element will stick to the normal page 
  flow. So if there is a left/right/top/bottom/z-index set then there will be no effect on that element. */
}
.red {
  width: 100px;
  height: 100px;
  background-color: red;
  position: relative;
  /* relative: an element’s original position remains in the flow of the document, just like the static
   value. But now left/right/top/bottom/z-index will work. The positional properties “nudge” the element
    from the original position in that direction. */
  right: 30px;
  bottom: 30px;
}
.yellow {
  width: 100px;
  height: 100px;
  background-color: yellow;
  position: absolute;
  /* absolute: the element is removed from the flow of the document and other elements will behave as if 
  it’s not even there whilst all the other positional properties will work on it.When we use left/right/top
  /bottom/z-index properties, they will work on the document, so right:100px will position the element
  to the right side of the screen -100px */
  right: 100px;
}
.green {
  width: 100px;
  height: 100px;
  background-color: green;
  position: fixed;
  /* fixed: the element is removed from the flow of the document like absolutely positioned elements. 
  In fact they behave almost the same, only fixed positioned elements are always relative to the document, 
  not any particular parent, and are unaffected by scrolling. */
}

.sticky {
  position: sticky;
  top: 0px;
  background-color: rgba(0, 0, 0, 0.646);
}

.sticky ul li,
.sticky ul li a {
  list-style-type: none;
  color: red;
  text-decoration: none;
}
